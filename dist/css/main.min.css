/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}summary{display:list-item}[hidden],template{display:none}*,legend{-webkit-box-sizing:border-box;box-sizing:border-box}body,html{width:100%;height:100vh;overflow:hidden}body{margin:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;font-family:arial,sans-serif}.content{-webkit-box-flex:1;-ms-flex:1 0;flex:1 0}.container{width:100%;padding:0 15px}@media screen and (min-width:576px){.container{margin:0 auto;width:540px}}@media screen and (min-width:768px){.container{width:720px}}@media screen and (min-width:992px){.container{width:960px}}@media screen and (min-width:1200px){.container{width:1140px}}.reset-list{list-style-type:none}.reset-link{text-decoration:none}.reset-btn{border:0;background:0 0;outline:0}.reset-btn:hover{cursor:pointer}header{position:absolute;right:0;top:0}.menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0;padding:20px 30px 0 0}.menu__item{font-family:arial,sans-serif;font-size:13;font-size:.8125rem}.menu__item:not(:last-child){margin-right:15px}.menu__item:hover{text-decoration:underline}.menu__item:nth-child(3),.menu__item:nth-child(4){width:24px;height:24px;border-radius:50%}.menu__item:nth-child(5){border-radius:50%}.menu__item:nth-child(3):hover,.menu__item:nth-child(4):hover,.menu__item:nth-child(5):hover{text-decoration:none}.menu__item:nth-child(3){position:relative}.menu__item:nth-child(4){font-size:10;font-size:.625rem;background:#424242}.menu__item:nth-child(4):hover{background:#000}.menu__item:nth-child(5){width:30px;height:30px;font-size:16;font-size:1rem;background:#8e00a2}.menu__link{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;color:#424242}.fa-bell,.menu__item:nth-child(5) .menu__link{color:#fff}.dropdown__input{position:absolute;opacity:0;width:24px;height:24px;z-index:-1}.label{height:24px;width:24px;color:rgba(0,0,0,.5)}.label:hover{color:#000;cursor:pointer}.label:focus{outline:1px solid #00f}.dropdown-wrapper{max-height:545px;border:1px solid #d8d8da;-webkit-box-shadow:0 0 30px -9px rgba(0,0,0,.75);box-shadow:0 0 30px -9px rgba(0,0,0,.75);background:#fff;overflow:auto}.wrapper{position:absolute;display:none;top:40px;right:-50px}.wrapper:before{content:"";position:absolute;right:51px;top:-20px;border:10px solid transparent;border-bottom:11px solid #fff;-webkit-box-shadow:0 0 30px -9px rgba(0,0,0,.75);box-shadow:0 0 30px -9px rgba(0,0,0,.75);z-index:1}.dropdown__input:checked+.label{color:#000}.dropdown__input:checked+.label~.wrapper{display:block}.dropdown__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:340px;height:500px;padding:30px}.dropdown__list:hover{cursor:default}.dropdown__item{-ms-flex-preferred-size:93px;flex-basis:93px;min-height:115px}.dropdown__item:hover{cursor:pointer}.dropdown__item:hover .dropdown__link{border:1px solid #d8d8da}.dropdown__link,.dropdown__link:hover{display:-webkit-box;display:-ms-flexbox;display:flex}.dropdown__link{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;color:#000;min-height:85px;min-width:85px;border:1px solid transparent}.dropdown__link:hover{border:1px solid #d8d8da}.dropdown__link:focus{outline:0;border:1px solid transparent}.dropdown__link:focus .dropdown__img{border:1px solid #b0b7ff}.dropdown__img{max-height:60px;padding:5px;border:1px solid transparent;border-radius:5px}.dropdown__btn{height:35px;line-height:35px;width:100%;text-align:center;background:#f5f5f5}.dropdown__list--additional{display:none;position:relative}.dropdown__list--additional:before{content:"";height:1px;width:280px;background-color:#d8d8da;position:absolute;top:0}.dropdown__input--additional{position:absolute;opacity:0}.dropdown__input--additional:checked+.label--additional~.dropdown__list--additional{display:-webkit-box;display:-ms-flexbox;display:flex}.dropdown__input--additional:checked+.label--additional{display:none}.input-wrapper{height:100vh;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.label-text{padding-bottom:30px}.label-text>span{font-family:Arial,Helvetica,sans-serif;font-size:70px;font-weight:700}.label-text>span:first-child,.label-text>span:nth-child(4){color:#4285f4}.label-text>span:nth-child(2),.label-text>span:nth-child(6){color:#ea4335}.label-text>span:nth-child(3),.label-text>span:nth-child(7){color:#fbc118}.label-text>span:nth-child(5){color:#34a853}.input-label{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.main__input{width:580px;height:45px;border-radius:30px;border:1px solid #d8d8da;padding:10px;margin-bottom:30px;outline:0}.main__input:hover{-webkit-box-shadow:0 3px 20px -9px rgba(0,0,0,.75);box-shadow:0 3px 20px -9px rgba(0,0,0,.75)}.input-btn{display:inline;color:#5f6368;background:#f2f2f2;border:1px solid transparent;border-radius:5px;padding:10px 20px;font-size:14px}.input-btn:first-of-type{margin-right:15px}.input-btn:hover{cursor:pointer;border:1px solid #636363}.dropdown__btn--additional{background:0 0}.dropdown__btn--additional:hover{text-decoration:underline}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
